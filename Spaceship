import simplegui
import math
import random

# globals for user interface
WIDTH = 800
HEIGHT = 600
score = 0
lives = 3
time = 0
rocks_amount = 3
missile_lifetime = 0.3 #the less the longer lives
ship_deceleration = 0.85 #the more the faster stops
ship_acceleration = 0.25 #the more the faster accelerates
rock_group = set() # set of rocks get changed in def rock_spawner every 5000mls
missile_group = set() #set of missiles get changed by spacebar
started = False

#MAIN CLASS FOR ALL IMAGES
class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

#PICTURES AND SOUNDS LINKS    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
#fonovye oblomki asteroidov
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
#fon - kosmicheskii
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.f2014.png")

# splash image
#zastavka (nazvanie+start game)
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 50)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
# kartinki vzryva posledovatelno
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")

# sound assets purchased from sounddogs.com, please do not redistribute
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
missile_sound.set_volume(.5)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

# CLASSES OF OBJECTS
# Ship class
class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        
    def draw(self,canvas):
        canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)

    def update(self):
        if self.pos [0]<0:
            self.pos [0] += WIDTH
        elif self.pos [0]>WIDTH:
            self.pos [0] -= WIDTH
        if self.pos [1] >HEIGHT:
            self.pos [1] -= HEIGHT
        elif self.pos [1] <0:
            self.pos [1] += HEIGHT
            
        self.pos [0] += self.vel[0]
        self.pos [1] += self.vel[1]        
        self.angle += self.angle_vel
        
               
        if self.thrust:
            self.vel[0] += math.cos(self.angle)*ship_acceleration
            self.vel[1] += math.sin(self.angle)*ship_acceleration
            self.image_center [0] = 135
            ship_thrust_sound.play()
            ship_thrust_sound.set_volume(0.8)
        else:
            self.vel[0] *= ship_deceleration
            self.vel[1] *= ship_deceleration
            self.image_center [0] = 45
            ship_thrust_sound.pause()
            
    def shoot(self):
        if started:
            a_missile = Sprite([my_ship.vel[0], my_ship.vel[1]], [0,0], 0, 0, missile_image, missile_info, missile_sound)
            a_missile.pos[0] = self.pos[0] + math.cos(self.angle)*45
            a_missile.pos[1] = self.pos[1] + math.sin(self.angle)*45
            a_missile.vel[0] = self.vel[0] + math.cos(self.angle)*3
            a_missile.vel[1] = self.vel[1] + math.sin(self.angle)*3
            missile_sound.play()
            missile_group.add(a_missile)
        
# Sprite class (for rocks and missiles)
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
     
   
    def draw(self, canvas):
        canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)
        
    
    def update(self):
        #to keep element inside the screen
        if self.pos [0]<0:
            self.pos [0] += WIDTH
        elif self.pos [0]>WIDTH:
            self.pos [0] -= WIDTH
        if self.pos [1] >HEIGHT:
            self.pos [1] -= HEIGHT
        elif self.pos [1] <0:
            self.pos [1] += HEIGHT
        #to move the element    
        self.angle += self.angle_vel
        self.pos[0] += self.vel[0]
        self.pos[1] += self.vel[1]
        #to check the age of element
        self.age = self.age + missile_lifetime
        if self.lifespan <= self.age:
            return True
        else: 
            return False
            
    def collide (self,other_object):
        global is_collide
        if dist(self.pos,other_object.pos) <= self.radius + other_object.radius:
            return True 
    
# FUNCTIONS
# point-to-point distance, for collision calculations
def dist(p,q):
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2) 

# draws and updates every item in set of sprites: rocks and missles
def process_sprite_group(group,canvas): 
    remove_set = set()
      
    for item in group:
        item.draw(canvas)
        item.update()
        if item.update():
            remove_set.add(item)
    group.difference_update(remove_set)              
            
# checks collisions between elements of the set and one object
def group_collide(group, other_object):
    remove_set= set() #set of group elements collided with object => to remove from drawing
    for element in group:
        if element.collide(other_object):
            remove_set.add(element)
            group.difference_update(remove_set)
            return True
        else:
            return False

# checks collisions between elements of 2 sets
def group_group_collide(missiles, rocks):
    remove_set= set()
    for rock in rocks:
        group_collide(missiles, rock)
        if group_collide (missiles, rock):
            remove_set.add(rock)
            rocks.difference_update(remove_set)
            return True
        
   
# draw function           
def draw(canvas):
    global time, score, lives, started, rock_group, missile_group 
    
    # animiate background and user interface
    time += 1
    wtime = (time / 4) % WIDTH
    center = debris_info.get_center()
    size = debris_info.get_size()
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
    canvas.draw_image(debris_image, center, size, (wtime - WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_image(debris_image, center, size, (wtime + WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_text("Lives", [20,40],30, "White")
    canvas.draw_text(str(lives), [20,70], 30, "White")
    canvas.draw_text("Score", [700,40], 30, "White")
    canvas.draw_text(str(score), [700,70], 30, "White")
    
    #check collisions
    #group_collide(rock_group, my_ship)
    if group_collide(rock_group, my_ship) == True:
        lives -=1
    if group_group_collide(missile_group,rock_group) == True:
        score +=1
    
    #checking game over
    if lives <= 0:
        started = False
    
    # draw ship and sprites (calling draw method from appropriate class)
    if started: 
        my_ship.draw(canvas)
        process_sprite_group(rock_group,canvas)
        process_sprite_group(missile_group,canvas)
        soundtrack.play()    
        # update ship and sprites (calling update method from appropriate class)
        my_ship.update()
    else:
        canvas.draw_image(splash_image, splash_info.get_center(), splash_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH/2, HEIGHT/2])
        soundtrack.pause()
        rock_group = set()
        missile_group = set()
        my_ship.pos = [WIDTH / 2, HEIGHT / 2]
        my_ship.vel = [0, 0]
        my_ship.angle = math.pi*3/2

# timer handler that spawns a rock with random parameters    
def rock_spawner():
    global a_rock, rocks_amount
    if len(rock_group)<rocks_amount:
        a_rock = Sprite([random.randint(0,WIDTH), random.randint(0,HEIGHT)],[random.randint(-5,5)+1,random.randint(-5,5)-1], 0, random.choice([0.01,0.02, 0.03, 0.04, 0.05, 0.06 ]),asteroid_image, asteroid_info)
        if dist(a_rock.pos,my_ship.pos)>150:
            rock_group.add(a_rock)
        
# keyhandlers
def keydown(key):
    if key == simplegui.KEY_MAP["left"]:
        my_ship.angle_vel -= 0.08 #rotates the ship clockwise by changing the angle in radians
    if key == simplegui.KEY_MAP["right"]:
        my_ship.angle_vel += 0.08 #rotates the ship counterclockwise
    if key == simplegui.KEY_MAP["up"]:
        my_ship.thrust = True #ship forward
    if key == simplegui.KEY_MAP["space"]:
        my_ship.shoot()  #shoot missile 
        
def keyup(key):
    if key == simplegui.KEY_MAP["left"]:
        my_ship.angle_vel = 0 #stops the rotation of the ship
    if key == simplegui.KEY_MAP["right"]:
        my_ship.angle_vel = 0 #stops the rotation of the ship
    if key == simplegui.KEY_MAP["up"]:
        my_ship.thrust = False #stops the ship's acceleration 

#mousehandler
def mouse_handler(pos):
    global started,lives,score
    if pos[0]>=0 and pos[0]<=800 and pos[1]>=0 and pos[1]<=600:
        if not started:
            lives = 3
            soundtrack.rewind()
            score = 0
            started = True
        
# initialize frame
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)

# initialize ship 
my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], math.pi*3/2, ship_image, ship_info)

# register handlers
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.set_mouseclick_handler(mouse_handler)
timer = simplegui.create_timer(2500.0, rock_spawner) #calls  rock_spawner every 1500.0 mls

# get things rolling
timer.start()
frame.start()
