import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0
k = 1


# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self,):
        self.list = []	# create Hand object
    
    def __len__(self):
        return len(self.list)

    def __str__(self):
        hand = ""
        for i in range(len(self)):
            hand +=str(self.list[i]) + " "
        return "Hand contains " + hand	# return a string representation of a hand

    def add_card(self, card):
        return self.list.append(card) # add a card object to a hand

    def get_value(self):
        value = 0
        ases = 0# count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        #if len(self.list)>0:
        for i in range(len(self.list)):
            value += VALUES[self.list[i].rank]# compute the value of the hand, see Blackjack video
            if self.list[i].rank == "A":
                ases += 1
        if ases <> 0 and value <= 11:
            value +=10
        return value
    
    def draw(self, canvas,y_pos,shown):
        positions = range(shown,len(self.list))
        for i in positions:
            pos = [30+i*90,y_pos]
            self.list[i].draw(canvas, pos)
            # draw a hand on the canvas, use the draw method for cards
 
        
# define deck class 
class Deck:
    def __init__(self):
        self.deck = []
        for s in SUITS:
            for r in RANKS:
                c = Card(s, r)
                self.deck.append(c)	# create a Deck object

    def shuffle(self):
        # shuffle the deck 
        return random.shuffle(self.deck)  # use random.shuffle()

    def deal_card(self):
        self.deal = random.choice(self.deck)
        return self.deal # deal a card object from the deck
    
    def __str__(self):
        deck = ""
        for i in range(len(self.deck)):
            deck +=str(self.deck[i]) + " "
        return "Deck contains "	+ deck # return a string representing the deck



#define event handlers for buttons
def deal():
    global outcome,player,diller,in_play, game_message, new_deal, k,who_win,end, dealler_score
    end = False
    game_message = "Hit or stand?"
    new_deal = "" 
    outcome = Deck()
    outcome.shuffle()
    player = Hand()
    diller = Hand()
    k = 1
    who_win = ""
    dealler_score = ""
    for i in range(2):
        c = outcome.deal_card()
        player.add_card(c)
        outcome.deck.remove(c)    
        d = outcome.deal_card()
        diller.add_card(d)
        outcome.deck.remove(d)
        
    in_play = True
    #print player
    #print player.get_value()
    #print diller
    #print diller.get_value()
    
def hit():
    global game_message,new_deal, end
    if player.get_value() <= 21 and not end:
        c = outcome.deal_card()
        player.add_card(c)
        outcome.deck.remove(c)
    if player.get_value() > 21 and not end:
        game_message = "You've busted."
        new_deal = "New deal?" 
        end_game()
    #print player
    #print player.get_value()    
 
    # if the hand is in play, hit the player
   
    # if busted, assign a message to outcome, update in_play and score
       
def stand():
    global end,score
    if diller.get_value()<17 and player.get_value()<21 and not end:
        c = outcome.deal_card()
        diller.add_card(c)
        outcome.deck.remove (c)
        end_game()
    else:
        if not end:
            end_game()
          
    # assign a message to outcome, update in_play and score
def end_game():
    global k, who_win, end, score, dealler_score
    k = 0
    if diller.get_value()>21:
        who_win = "Dealler busted!"
        score +=1
    else:    
        if diller.get_value() >= player.get_value() or player.get_value()>21:
            who_win = "Dealler wins!"
            score -=1
        else: 
            who_win = "Player wins!"
            score +=1
    dealler_score = str(diller.get_value())
    end = True
    
# draw handler    
def draw(canvas):
    global k
    # test to make sure that card.draw works, replace with your code below
    canvas.draw_text("BlackJack", [30,75], 70, 'Blue')
    canvas.draw_text("Dealer:", [30,150], 50, 'Black')
    canvas.draw_text(dealler_score, [180,150], 50, 'Black')
    canvas.draw_text("Player: " + str(player.get_value()), [30,375], 50, 'Black')
    canvas.draw_text("Score: " + str(score), [350,75], 40, 'Red')
    canvas.draw_text(who_win, [250,150], 50, 'Black')
    canvas.draw_text(game_message, [250,375], 45, 'Red')
    canvas.draw_text(new_deal, [320,420], 45, 'Red')
    #card = Card("S", "A")
    player.draw(canvas, 425, 0)
    #player.list[1].draw(canvas, [120,425])
    #diller.list[0].draw(canvas, [30,200])
    canvas.draw_image(card_back, CARD_CENTER, CARD_SIZE, [66,248], CARD_SIZE)
    diller.draw(canvas, 200, k)


# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()
